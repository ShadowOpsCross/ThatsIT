name: loperamid

on:
  push:
    branches:
      - master 

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: eu-central-1

      - name: Create EC2 Instances
        run: |
          aws cloudformation deploy \
          --stack-name my-instances-stack \
          --template-file cfecs.yml \
          --capabilities CAPABILITY_NAMED_IAM

      - name: Wait for EC2 Instances to be created
        run: |
          aws cloudformation wait stack-create-complete --stack-name my-instances-stack

      - name: Get EC2 Instance IDs
        run: |
          id1=$(aws cloudformation describe-stack-resources --stack-name my-instances-stack --query 'StackResources[?LogicalResourceId==`EC2Instance1`].PhysicalResourceId' --output text)
          id2=$(aws cloudformation describe-stack-resources --stack-name my-instances-stack --query 'StackResources[?LogicalResourceId==`EC2Instance2`].PhysicalResourceId' --output text)
          echo "::set-env name=INSTANCE_ID_1::$id1"
          echo "::set-env name=INSTANCE_ID_2::$id2"

      - name: Register EC2 Instances with ECS Cluster
        run: |
          instance_arn1=$(aws ecs list-container-instances --cluster DeepLearnProject --filter "ec2InstanceId==$INSTANCE_ID_1" --query 'containerInstanceArns[0]' --output text)
          instance_arn2=$(aws ecs list-container-instances --cluster DeepLearnProject --filter "ec2InstanceId==$INSTANCE_ID_2" --query 'containerInstanceArns[0]' --output text)
          aws ecs register-container-instance --cluster DeepLearnProject --container-instance $instance_arn1
          aws ecs register-container-instance --cluster DeepLearnProject --container-instance $instance_arn2

      - name: Deploy ECS Services
        run: |
          aws cloudformation deploy \
          --stack-name my-services-stack \
          --template-file cfecs2.yml \
          --capabilities CAPABILITY_NAMED_IAM



          
          


          
          




